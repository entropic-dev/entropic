storageApi
    getProviders()                      s listProviders()
        [Provider]
              Provider.redirect
    getProvider(name)
    getAuthentication({remoteId, provider})
        Authentication
              user: User
    signup({username, email, remoteAuth: {token, id, provider}})
        * NOTE: bring email uniqueness check into signup
        * NOTE: err.code
            - "signup.email_taken"
            - "signup.username_taken"
        User
    getToken(key) -> {user}
        * NOTE: send the key in a header, not the path
    getTokens({for: user, page: N})     s listTokens()
      [objects]
    createToken({for: user, description})
    deleteToken({for: user, valueHashes: [String]}) -> { count }
    resolveCLISession({session, value})
    fetchCLISession({session}) -> { description, value? }
    createCLISession({description}) -> id String
    listPackageMaintainers({namespace, host, name, page, status = 'active'})

    invitePackageMaintainer({namespace, host, name, bearer, to})
        * NOTE: err.code
            - maintainer.invite.invitee_dne
            - maintainer.invite.package_dne
            - maintainer.invite.already_accepted
            - maintainer.invite.already_declined
        - I think the invite logic might be incorrect around
          maintainers.js L75, need to look into this.
    removePackageMaintainer({namespace, host, name, bearer, to})
        * NOTE: err.code
            - maintainer.invite.invitee_dne
            - maintainer.invite.package_dne
            - maintainer.invite.already_accepted
            - maintainer.invite.already_declined
            - maintainer.invite.invitee_not_maintainer (distinct from invitee_dne: namespace exists but is not a maintainer)
    acceptMaintainerInvite({namespace, host, name, member, bearer})
        * NOTE: err.code
            - maintainer.invite.invitee_dne
            - maintainer.invite.package_dne
            - maintainer.invite.already_accepted
            - maintainer.invite.already_declined
            - maintainer.invite.invitee_not_maintainer (distinct from invitee_dne: namespace exists but is not a maintainer)
    declineMaintainerInvite({namespace, host, name, member, bearer})
        * NOTE: err.code
            - maintainer.invite.invitee_dne
            - maintainer.invite.package_dne
            - maintainer.invite.already_accepted
            - maintainer.invite.already_declined
            - maintainer.invite.invitee_not_maintainer (distinct from invitee_dne: namespace exists but is not a maintainer)
    listNamespaces({page})
        - list with objects, next, prev, total
    listNamespaceMembers({page, namespace, host})
        - list with objects, next, prev, total
    inviteNamespaceMember({namespace, host, invitee, bearer})
        * NOTE: err.code
            - member.invite.invitee_dne
            - member.invite.namespace_dne
            - member.invite.bearer_unauthorized
            - member.invite.invitee_already_member
            - member.invite.pending
            - member.invite.declined
    removeNamespaceMember({namespace, host, invitee, bearer})
        * NOTE: err.code
            - member.invite.invitee_dne
            - member.invite.namespace_dne
            - member.invite.bearer_unauthorized
            - member.invite.invitee_not_member
            - member.invite.pending
            - member.invite.declined
    acceptNamespaceInvite({namespace, host, invitee, bearer})
        * NOTE: err.code
            - member.invite.invitee_dne
            - member.invite.namespace_dne
            - member.invite.bearer_unauthorized
            - member.invite.invite_dne
    declineNamespaceInvite({namespace, host, invitee, bearer})
        * NOTE: err.code
            - member.invite.invitee_dne
            - member.invite.namespace_dne
            - member.invite.bearer_unauthorized
            - member.invite.invite_dne
    listMemberships({page, for, status: 'pending' | 'active', bearer})
    listMaintainerships({page, namespace, host, status: 'pending' | 'active', bearer})
    listPackages({page})
    getPackage({namespace, host, name})
    replacePackage({namespace, host, name, require_tfa})
    deletePackage({namespace, host, name, ...data})
    getPackageVersion({namespace, host, name, version})
    createPackageVersion({namespace, host, name, version, request})
    deletePackageVersion({namespace, host, name, version})
    getObject({algo, digest}) // promise for a stream


response.rawjson(str) // for enemies
response.empty()
